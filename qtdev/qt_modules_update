#!/bin/bash

GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\e[0;33m"
NOCOL="\033[0m"

function log
{
  template="$1"
  shift
  printf "${YELLOW}${template}${NOCOL}\n" "$@"
}

function update
{
  unique_upstreams=()
  upstreams=( "$(git branch --format='%(upstream)')" )
  for upstream in ${upstreams[@]}
  do
    upstream=${upstream#"refs/remotes/"""}
    upstream=${upstream%%"/"*}
    for unique in ${unique_upstreams[@]}
    do
      [[ ${unique} == ${upstream} ]] && upstream=""
    done
    [[ -z $upstream ]] && continue
    unique_upstreams=( ${unique_upstreams[@]} $upstream )
  done

  log "Fetching %s" "${unique_upstreams[@]}"
  for upstream in ${unique_upstreams[@]}
  do
    git fetch $upstream
  done

  git checkout $branch

  remote=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})
  remote=${remote%%"/"*}
  [[ -z $remote ]] && remote="origin"

  stashsha=$(git stash create /dev/null)
  if [ ! -z $stashsha ]
  then
    git stash store $stashsha -m "From $0"
    git reset --hard
  fi

  git rebase $remote/$branch

  if [ ! -z $stashsha ]
  then
    git stash pop
  fi
}

if [ -f .git_worktree ]
then
  log "Updating toplevel project"
  pwd
  mv .git_worktree .git
  branch=$(git branch --show-current --no-color)
  update
  mv .git .git_worktree
  log "Toplevel project updated"
elif [ -f .git ]
then
  branch=$(git branch --show-current --no-color)
else
  branch=$(basename $PWD)
fi

[[ -z $branch ]] && echo "Can't determine branch"

log "Updating $branch"

for subproject in */
do
  [[ "$(ls -A ${subproject})" ]] || rm -r "${subproject}"
done

superrepo=""

for subproject in */
do
    [ ! -f "${subproject}.git" ] && continue
    subproject=$(basename $subproject)

    log "Updating $subproject"
    cd $subproject

    if [ -z $superrepo ]
    then
      superrepo=$(git rev-parse --git-dir)
      superrepo="${superrepo%\.git*}"
      superrepo="${superrepo%$subproject*}"
    fi

    update
    git submodule update

    log "$subproject Updated"
    cd ..
done
